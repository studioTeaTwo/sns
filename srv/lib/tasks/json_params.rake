# encoding: utf-8

namespace :json_params do
  desc "create the definitions of json params"

  task :generate => :environment do
    create('Session', "#{Rails.root}/app/controllers/params/session.rb",
      nil,
      {email: 'string', password: 'string'}
    )
    create(User, "#{Rails.root}/app/controllers/params/user.rb",
      [:id, :created_at, :updated_at]
    )
    create(Relationship, "#{Rails.root}/app/controllers/params/relationship.rb", 
      [:id, :user_id, :created_at, :updated_at]
    )
    create(Chat, "#{Rails.root}/app/controllers/params/chat.rb",
      [:id, :user_id, :created_at, :updated_at],
      {item_list: 'hash'}
    )
    create(ChatThread, "#{Rails.root}/app/controllers/params/chat_thread.rb",
      [:id, :user_id, :created_at, :updated_at],
      {participants: 'Array<integer>'}
    )
    create(Micropost, "#{Rails.root}/app/controllers/params/micropost.rb",
      [:id, :user_id, :created_at, :updated_at]
    )
    create(Ige, "#{Rails.root}/app/controllers/params/ige.rb",
      [:id, :user_id, :created_at, :updated_at]
    )
  end

  private

    def create(object, file_path, exclusion_list, special_case_list=nil)
      val = ''
      if (object.instance_of?(String))
        # Custom Definitions
        special_case_list.each do |k, v|
          val << "# @attr [#{v}] #{k.to_s.camelize(:lower)}\n"
        end
      else
        # ActiveRecord Object
        object.columns.map do |column|
          next if exclusion_list.include? column.name.to_sym
          type = special_case_list && special_case_list.keys.include?(column.name.to_sym) ?
            special_case_list[column.name.to_sym] : adjust(column.type)
          val << "# @attr [#{type}] #{column.name.camelize(:lower)}\n"
        end
      end

      str = <<EOS
# This was generated by `rails json_params:generate`
#
# @name #{object}StrongParameter
#
#{val.chomp}
class Params::#{object}; end
EOS
      
      File.open(file_path,"w") {|file| file.puts str}
    end

    def adjust(type)
      case type
      when :text
        type = 'string'
      when :datetime
        type = 'date-time'
      when :decimal
        type = 'double'
      else
        type
      end
    end
end
