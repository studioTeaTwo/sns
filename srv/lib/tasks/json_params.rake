# encoding: utf-8

namespace :json_params do
  desc "create the definitions of json params"

  task :generate => :environment do
    filenames = Dir.glob("#{Rails.root}/app/controllers/params/*.rb")
    File.unlink *filenames

    create('Session', "#{Rails.root}/app/controllers/params/session.rb",
      nil,
      {email: 'string', password: 'string'}
    )
    create(User, "#{Rails.root}/app/controllers/params/user.rb",
      [:created_at, :updated_at]
    )
    create(Relationship, "#{Rails.root}/app/controllers/params/relationship.rb", 
      [:user_id, :created_at, :updated_at]
    )
    create(Chat, "#{Rails.root}/app/controllers/params/chat.rb",
      [:user_id, :created_at, :updated_at],
      {item_list: 'hash'}
    )
    create(ChatThread, "#{Rails.root}/app/controllers/params/chat_thread.rb",
      [:user_id, :created_at, :updated_at],
      {participants: 'Array<integer>'}
    )
    create(Micropost, "#{Rails.root}/app/controllers/params/micropost.rb",
      [:user_id, :created_at, :updated_at]
    )
    create(DailyLog, "#{Rails.root}/app/controllers/params/daily_log.rb",
      [:user_id, :created_at, :updated_at],
      {symptom: 'string', photograph: 'Array<string>'}
    )
    create(Ige, "#{Rails.root}/app/controllers/params/ige.rb",
      [:user_id, :created_at, :updated_at]
    )
  end

  private

    def create(object, file_path, exclusion_list, special_case_list=nil)
      val = ''
      if (object.instance_of?(String))
        # Custom Definitions
        special_case_list.each do |k, v|
          val << "# @attr [#{v}] #{k.to_s.camelize(:lower)}\n"
        end
      else
        # ActiveRecord Object
        object.attribute_types.map do |key, active_model_type|
          next if exclusion_list.include? key.to_sym
          type = special_case_list && special_case_list.keys.include?(key.to_sym) ?
            special_case_list[key.to_sym] : adjust(active_model_type)
          val << "# @attr [#{type}] #{key.camelize(:lower)}\n"
        end
      end

      str = <<EOS
# This was generated by `rails json_params:generate`
#
# @name #{object}StrongParameter
#
#{val.chomp}
class Params::#{object}; end
EOS
      
      File.open(file_path,"w") {|file| file.puts str}
    end

    def adjust(model)
      case model.type
      when :text
        type = 'string'
      when :time
      when :datetime
        type = 'date-time'
      when :decimal
        type = 'float' # 'string'
      else
        type = model.type
      end
    end
end
